# -*- coding: utf-8 -*-
import telebot
from telebot import types
import random
from datetime import datetime, timezone
# import psycopg2
from pussynamer_db import *


# ~~~~~~~~~~ BOT OPERATIONS ~~~~~~~~~~

TOKEN = '1969594443:AAEHHKGX1RaJIU9KLEcFnq5_DI5GFgJrlqQ'
bot = telebot.TeleBot(TOKEN)

note_status = "START"
note = ""

pussy_record = {}

# keyboard1 = telebot.types.ReplyKeyboardMarkup(True, True)
# keyboard1.row('/create', '/get', '/end', '/update')

# ~~~~~~~~~~ MESSAGE HANDLERS ~~~~~~~~~~

@bot.message_handler(commands=['start'])
def start_message(message):
    keyboard_start = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    hello_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–¥—É–º–∞—Ç—å –∏–º—è –¥–ª—è –≤–∞—à–µ–π –∫–∏—Å–∫–∏"
    go_button = types.KeyboardButton(text="/go")
    keyboard_start.add(go_button)
    bot.send_message(message.chat.id, hello_text, reply_markup=keyboard_start)

@bot.message_handler(commands=["go"])
def geo(message):
    global pussy_record
    global note_status
    id_user = message.from_user.id
    pussy_record["id_user"] = id_user
    print(pussy_record)
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    # button_geo = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç", request_location=True)
    # keyboard.add(button_geo)
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –∏–º—è", reply_markup=keyboard)
    note_status = "WAITING"
    print(note_status)

# @bot.message_handler(content_types=["location"])
# def location(message):
#     global note_status
#     global pussy_record
#     if message.location is not None:
#         rmv_keyboard = types.ReplyKeyboardRemove()
#         # print("latitude: {}; longitude: {}".format(lat,lon))
#         # bot.send_message(message.chat.id, "–®–∏—Ä–æ—Ç–∞: {} \n–î–æ–ª–≥–æ—Ç–∞: {}".format(lat, lon), reply_markup=rmv_keyboard)
#         pussy_record["lat_field"] = message.location.latitude
#         pussy_record["lon_field"] = message.location.longitude
#         # print(pussy_record)
#         note_status = "WAITING"
#         bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å –∑–∞–º–µ—Ç–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=rmv_keyboard)
#         # markup = types.ReplyKeyboardRemove(selective=False)
#         bot.register_next_step_handler(message, add_note)
        

@bot.message_handler(content_types=['text'])
def add_note(message):
    global pussy_record
    # pussy_record = {}
    # print("!!!!!!CHECKING",lat, lon)
    global note
    # print(note_status)
    if note_status == 'WAITING':
        keyboard_finish = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
        button_save = types.KeyboardButton(text="/save")
        keyboard_finish.add(button_save)
        note = message.text
        pussy_record["note_field"] = note
        bot.send_message(message.chat.id, "–í–∞—à–∞ pussy –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω: {}".format(pussy_record), reply_markup=keyboard_finish)
        # bot.register_next_step_handler(message, save_note)
        # pussy_record[]
        print(pussy_record)
        bot.register_next_step_handler(message, save_note)

    else:
        bot.send_message(message.chat.id, "–û–®–ò–ë–ö–ê: –ë–û–¢ –ù–ï –ñ–î–ï–¢ –¢–ï–ö–°–¢")

@bot.message_handler(commands=["save"])
def save_note(message):
    global pussy_record
    # created_on_field = str(datetime.fromtimestamp(message.date))
    created_on_field = datetime.fromtimestamp(message.date).strftime('%Y-%m-%dT%H:%M:%S')
    print(created_on_field)
    user_field = pussy_record["id_user"]
    pussyname_field = pussy_record["note_field"]

    # INSERT TO DB USER NOTES
    insert(user_field, created_on_field, pussyname_field)
    
bot.polling(none_stop=True, interval=0)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


# ~~~~~~~~~~ DB OPERATIONS ~~~~~~~~~~

# id_user_field = "00001"
# created_on_field = u'2016-03-01T12:40:45.236697'
# note_field = "MY FOURTH TEST note AND FIRST AFTER DROPPING CNSTRNT"
# lat_field = "55.702955"
# lon_field = "37.947512"

# if __name__ == '__main__':
#     # connect()
#     insert(id_user_field, created_on_field, note_field, lat_field, lon_field)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# # @bot.message_handler(content_types=["text"])
# # def handle_text(message):
# #     if message.text == "Hi":
# #         bot.send_message(message.from_user.id, "Hello! I am HabrahabrExampleBot. How can i help you?")
    
# #     elif message.text == "How are you?" or message.text == "How are u?":
# #         bot.send_message(message.from_user.id, "I'm fine, thanks. And you?")
    
# #     else:
# #         bot.send_message(message.from_user.id, "Sorry, i dont understand you.")




# # @bot.message_handler(commands=['start'])
# # def start_command(message):
# #     bot.send_message(message.chat.id, "Hello!")
# # bot.polling()

# # conda create --name geobrain python=3.6

# # now = datetime.datetime.now()conda deactivate


# # keyboard1 = types.ReplyKeyboardMarkup(True, True)

# # cmd_tuple = ('/create', '/get', '/end', '/update')

# # keyboard1.row('/create', '/get', '/end', '/update')
# # # keyboard1.row('–ü—Ä–∏–≤–µ—Ç!', '–ü–æ–∫–∞')

# # cmd1 = "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /create"
# # cmd2 = "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ü–µ–ª–µ–π –≤–≤–µ–¥–∏—Ç–µ /get"
# # cmd3 = "–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ /end"
# # cmd4 = "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /update"

# # onboard_message = "\n{}\n{}\n{}\n{}:\n\n".format(cmd1, cmd2, cmd4, cmd3)

# # onboard_message = "\n{}\n{}\n{}\n{}:\n\n".format(cmd1, cmd2, cmd4, cmd3)